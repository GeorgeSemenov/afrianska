{"version":3,"file":"index.mjs","sources":["src/lib/parse-media.js","src/lib/get-custom-media-from-root.js","src/lib/get-custom-media-from-imports.js","src/index.js"],"sourcesContent":["function parse(string, splitByAnd) {\n\tconst array = [];\n\tlet buffer = '';\n\tlet split = false;\n\tlet func = 0;\n\tlet i = -1;\n\n\twhile (++i < string.length) {\n\t\tconst char = string[i];\n\n\t\tif (char === '(') {\n\t\t\tfunc += 1;\n\t\t} else if (char === ')') {\n\t\t\tif (func > 0) {\n\t\t\t\tfunc -= 1;\n\t\t\t}\n\t\t} else if (func === 0) {\n\t\t\tif (splitByAnd && andRegExp.test(buffer + char)) {\n\t\t\t\tsplit = true;\n\t\t\t} else if (!splitByAnd && char === ',') {\n\t\t\t\tsplit = true;\n\t\t\t}\n\t\t}\n\n\t\tif (split) {\n\t\t\tarray.push(splitByAnd ? new MediaExpression(buffer + char) : new MediaQuery(buffer));\n\n\t\t\tbuffer = '';\n\t\t\tsplit = false;\n\t\t} else {\n\t\t\tbuffer += char\n\t\t}\n\t}\n\n\tif (buffer !== '') {\n\t\tarray.push(splitByAnd ? new MediaExpression(buffer) : new MediaQuery(buffer));\n\t}\n\n\treturn array;\n}\n\nclass MediaQueryList {\n\tconstructor(string) {\n\t\tthis.nodes = parse(string);\n\t\tthis.nodeType = 'list';\n\t}\n\n\tinvert() {\n\t\tthis.nodes.forEach(node => {\n\t\t\tnode.invert();\n\t\t})\n\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\treturn new MediaQueryList(String(this));\n\t}\n\n\ttoString() {\n\t\treturn this.nodes.join(',');\n\t}\n}\n\nclass MediaQuery {\n\tconstructor(string) {\n\t\tconst [, before, media, after ] = string.match(spaceWrapRegExp);\n\t\tconst [, modifier = '', afterModifier = ' ', type = '', beforeAnd = '', and = '', beforeExpression = '', expression1 = '', expression2 = ''] = media.match(mediaRegExp) || [];\n\t\tconst raws = { before, after, afterModifier, originalModifier: modifier || '', beforeAnd, and, beforeExpression };\n\t\tconst nodes = parse(expression1 || expression2, true);\n\n\t\tObject.assign(this, {\n\t\t\tmodifier,\n\t\t\ttype,\n\t\t\traws,\n\t\t\tnodes,\n\t\t\tnodeType: 'query'\n\t\t});\n\t}\n\n\tclone(overrides) {\n\t\tconst instance = new MediaQuery(String(this));\n\n\t\tObject.assign(instance, overrides);\n\n\t\treturn instance;\n\t}\n\n\tinvert() {\n\t\tthis.modifier = this.modifier ? '' : this.raws.originalModifier;\n\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst { raws } = this;\n\n\t\treturn `${raws.before}${this.modifier}${this.modifier ? `${raws.afterModifier}` : ''}${this.type}${raws.beforeAnd}${raws.and}${raws.beforeExpression}${this.nodes.join('')}${this.raws.after}`;\n\t}\n}\n\nclass MediaExpression {\n\tconstructor(string) {\n\t\tconst [, value, after = '', and = '', afterAnd = '' ] = string.match(andRegExp) || [null, string];\n\t\tconst raws = { after, and, afterAnd };\n\n\t\tObject.assign(this, { value, raws, nodeType: 'expression' });\n\t}\n\n\tclone(overrides) {\n\t\tconst instance = new MediaExpression(String(this));\n\n\t\tObject.assign(instance, overrides);\n\n\t\treturn instance;\n\t}\n\n\ttoString() {\n\t\tconst { raws } = this;\n\n\t\treturn `${this.value}${raws.after}${raws.and}${raws.afterAnd}`;\n\t}\n}\n\nconst modifierRE = '(not|only)';\nconst typeRE = '(all|print|screen|speech)';\nconst noExpressionRE = '([\\\\W\\\\w]*)';\nconst expressionRE = '([\\\\W\\\\w]+)';\nconst noSpaceRE = '(\\\\s*)';\nconst spaceRE = '(\\\\s+)';\nconst andRE = '(?:(\\\\s+)(and))';\nconst andRegExp = new RegExp(`^${expressionRE}(?:${andRE}${spaceRE})$`, 'i');\nconst spaceWrapRegExp = new RegExp(`^${noSpaceRE}${noExpressionRE}${noSpaceRE}$`);\nconst mediaRegExp = new RegExp(`^(?:${modifierRE}${spaceRE})?(?:${typeRE}(?:${andRE}${spaceRE}${expressionRE})?|${expressionRE})$`, 'i');\n\nexport default string => new MediaQueryList(string);\n","// return custom selectors from the css root\nexport default root => {\n\t// initialize custom selectors\n\tconst customMedias = {};\n\n\t// for each @custom-media at-rule\n\troot.nodes.forEach(node => {\n\t\tif (isCustomMedia(node)) {\n\t\t\t// extract the name and selectors from the params of the custom selector\n\t\t\tconst [, name, selectors] = node.params.match(customMediaParamsRegExp);\n\n\t\t\t// write the parsed selectors to the custom selector\n\t\t\tcustomMedias[name] = selectors;\n\t\t}\n\t});\n\n\t// return all custom medias\n\treturn customMedias;\n};\n\n// match the custom selector name\nconst customMediaNameRegExp = /^custom-media$/i;\n\n// match the custom selector params\nconst customMediaParamsRegExp = /^(--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/;\n\n// whether the atrule is a custom selector\nconst isCustomMedia = node => node.type === 'atrule' && customMediaNameRegExp.test(node.name) && customMediaParamsRegExp.test(node.params);\n","import fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\nimport getCustomMediaFromRoot from './get-custom-media-from-root';\n\n/* Get Custom Media from CSS File\n/* ========================================================================== */\n\nasync function getCustomMediaFromCSSFile(from) {\n\tconst css = await readFile(from);\n\tconst root = postcss.parse(css, { from });\n\n\treturn getCustomMediaFromRoot(root);\n}\n\n/* Get Custom Media from Object\n/* ========================================================================== */\n\nfunction getCustomMediaFromObject(object) {\n\tconst customMedia = Object.assign(\n\t\t{},\n\t\tObject(object).customMedia,\n\t\tObject(object)['custom-media']\n\t);\n\n\treturn customMedia;\n}\n\n/* Get Custom Media from JSON file\n/* ========================================================================== */\n\nasync function getCustomMediaFromJSONFile(from) {\n\tconst object = await readJSON(from);\n\n\treturn getCustomMediaFromObject(object);\n}\n\n/* Get Custom Media from JS file\n/* ========================================================================== */\n\nasync function getCustomMediaFromJSFile(from) {\n\tconst object = await import(from);\n\n\treturn getCustomMediaFromObject(object);\n}\n\n/* Get Custom Media from Imports\n/* ========================================================================== */\n\nexport default function getCustomMediaFromImports(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with Custom Media\n\t\tif (opts.customMedia || opts['custom-media']) {\n\t\t\treturn opts\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = path.resolve(String(opts.from || ''));\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customMedia, source) => {\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'css') {\n\t\t\treturn Object.assign(await customMedia, await getCustomMediaFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(await customMedia, await getCustomMediaFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(await customMedia, await getCustomMediaFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(await customMedia, await getCustomMediaFromObject(await source));\n\t}, {});\n}\n\n/* Promise-ified utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","import stylelint from 'stylelint';\nimport parseMedia from './lib/parse-media';\nimport getCustomMediaFromImports from './lib/get-custom-media-from-imports';\nimport getCustomMediaFromRoot from './lib/get-custom-media-from-root';\n\nexport const ruleName = 'csstools/media-use-custom-media';\n\nexport default stylelint.createPlugin(ruleName, (method, opts) => {\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// conditionally promise any custom selectors are imported\n\tconst customMediaPromise = isMethodAlwaysKnown(method) || isMethodKnown(method)\n\t\t? getCustomMediaFromImports(importFrom)\n\t: {};\n\n\treturn async (root, result) => {\n\t\t// valid methods are: \"always\" || \"always-known\" || \"never\" || \"known\" || true || false || null\n\t\tconst validOptions = stylelint.utils.validateOptions(result, ruleName, {\n\t\t\tactual: method,\n\t\t\tpossible() {\n\t\t\t\treturn isMethodAlways(method) || isMethodAlwaysKnown(method) || isMethodIndifferent(method) || isMethodKnown(method) || isMethodNever(method);\n\t\t\t}\n\t\t});\n\n\t\t// conditionally enforce the use of custom media\n\t\tif (validOptions && !isMethodIndifferent(method)) {\n\t\t\t// all custom properties from the file and imports\n\t\t\tconst customMedia = isMethodAlwaysKnown(method) || isMethodKnown(method)\n\t\t\t\t? Object.assign(await customMediaPromise, getCustomMediaFromRoot(root))\n\t\t\t: {};\n\n\t\t\t// check every @media at-rule\n\t\t\troot.walkAtRules(mediaAtRuleNameRegExp, atrule => {\n\t\t\t\tconst mediaAST = parseMedia(atrule.params);\n\t\t\t\tlet word = `@${atrule.name}`;\n\n\t\t\t\t// check whether media queries are using custom media references\n\t\t\t\tconst isCorrectlyUsingMedia = mediaAST.nodes.every(\n\t\t\t\t\tnode => node.nodes.every(\n\t\t\t\t\t\tchild => {\n\t\t\t\t\t\t\t// whether the expression is like @media (--foo)\n\t\t\t\t\t\t\tconst isCustomExpression = checkCustomExpression(child);\n\n\t\t\t\t\t\t\tconst returnValue = isCustomExpression\n\t\t\t\t\t\t\t\t? isMethodKnown(method) || isMethodAlwaysKnown(method)\n\t\t\t\t\t\t\t\t\t// @media (--foo) && (\"always-known\" || \"known\") && @custom-media --foo bar;\n\t\t\t\t\t\t\t\t\t? child.value.slice(1, -1) in customMedia\n\t\t\t\t\t\t\t\t// @media (--foo) && \"always\"\n\t\t\t\t\t\t\t\t: isMethodAlways(method)\n\t\t\t\t\t\t\t// !@media (--foo) && (\"known\" || \"never\")\n\t\t\t\t\t\t\t: isMethodKnown(method) || isMethodNever(method);\n\n\t\t\t\t\t\t\tif (!returnValue) {\n\t\t\t\t\t\t\t\tword = String(child);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn returnValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// conditionally report media queries not using custom media references\n\t\t\t\tif (!isCorrectlyUsingMedia) {\n\t\t\t\t\tstylelint.utils.report({\n\t\t\t\t\t\tmessage: isMethodNever(method)\n\t\t\t\t\t\t\t? messages.unexpected(atrule.params)\n\t\t\t\t\t\t: messages.expected(atrule.params),\n\t\t\t\t\t\tnode: atrule,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\truleName,\n\t\t\t\t\t\tword\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n});\n\nexport const messages = stylelint.utils.ruleMessages(ruleName, {\n\texpected(expression) {\n\t\treturn `Expected a custom media query instead of \"${expression}\".`;\n\t},\n\tunexpected(expression) {\n\t\treturn `Expected no custom media query instead of \"${expression}\".`;\n\t}\n});\n\nconst mediaAtRuleNameRegExp = /^media$/i;\nconst customMediaExpressionRegExp = /\\(--[\\w-]+\\)/i;\n\nconst checkCustomExpression = node => node.nodeType === 'expression' && customMediaExpressionRegExp.test(node.value)\n\nconst isMethodIndifferent = method => method === 'ignore' || method === null;\nconst isMethodAlways = method => method === 'always' || method === true;\nconst isMethodAlwaysKnown = method => method === 'always-known';\nconst isMethodKnown = method => method === 'known';\nconst isMethodNever = method => method === 'never' || method === false;\n\n"],"names":["parse","string","splitByAnd","array","buffer","split","func","i","length","char","andRegExp","test","push","MediaExpression","MediaQuery","MediaQueryList","constructor","nodes","nodeType","invert","forEach","node","clone","String","toString","join","before","media","after","match","spaceWrapRegExp","modifier","afterModifier","type","beforeAnd","and","beforeExpression","expression1","expression2","mediaRegExp","raws","originalModifier","Object","assign","overrides","instance","value","afterAnd","modifierRE","typeRE","noExpressionRE","expressionRE","noSpaceRE","spaceRE","andRE","RegExp","root","customMedias","isCustomMedia","name","selectors","params","customMediaParamsRegExp","customMediaNameRegExp","getCustomMediaFromCSSFile","from","css","readFile","postcss","getCustomMediaFromRoot","getCustomMediaFromObject","object","customMedia","getCustomMediaFromJSONFile","readJSON","getCustomMediaFromJSFile","getCustomMediaFromImports","sources","map","source","Promise","Function","opts","path","resolve","extname","slice","toLowerCase","reduce","reject","fs","error","result","JSON","ruleName","stylelint","createPlugin","method","importFrom","concat","customMediaPromise","isMethodAlwaysKnown","isMethodKnown","validOptions","utils","validateOptions","actual","possible","isMethodAlways","isMethodIndifferent","isMethodNever","walkAtRules","mediaAtRuleNameRegExp","atrule","mediaAST","parseMedia","word","isCorrectlyUsingMedia","every","child","isCustomExpression","checkCustomExpression","returnValue","report","message","messages","unexpected","expected","ruleMessages","expression","customMediaExpressionRegExp"],"mappings":"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"}